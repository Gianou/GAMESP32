Contents of AbstractGameObject.h:
#ifndef Abstract_Game_Object_H
#define Abstract_Game_Object_H

#include "TFT_eSPI.h"

class AbstractGameObject
{
public:
    virtual void update();
    virtual void render(TFT_eSprite &sprite);

private:
};
#endif

Contents of GameEngine.cpp:
#include "GameEngine.h"

void GameEngine::update()
{
    for (AbstractGameObject *gameObject : gameObjects)
    {
        gameObject->update();
    }
}

void GameEngine::render(TFT_eSprite &sprite)
{
    for (AbstractGameObject *gameObject : gameObjects)
    {
        gameObject->render(sprite);
    }
}

void GameEngine::addGameObject(AbstractGameObject *gameObject)
{
    gameObjects.push_back(gameObject);
}

void GameEngine::removeGameObject(AbstractGameObject *gameObject)
{
    // Find the game object in the vector
    std::vector<AbstractGameObject *>::iterator it = std::find(gameObjects.begin(), gameObjects.end(), gameObject);

    // Check if the game object was found
    if (it != gameObjects.end())
    {
        // Remove the game object from the vector
        gameObjects.erase(it);

        // Delete the game object
        delete gameObject;
    }
}

std::vector<AbstractGameObject *> GameEngine::getChildren()
{
    return gameObjects;
}

Contents of GameEngine.h:
#ifndef Game_Engine_H
#define Game_Engine_H

#include <vector>
#include <algorithm>
#include <TFT_eSPI.h>
#include "AbstractGameObject.h"

class GameEngine : public AbstractGameObject
{
public:
    void update() override;
    void render(TFT_eSprite &sprite) override;
    void addGameObject(AbstractGameObject *gameObject);
    void removeGameObject(AbstractGameObject *gameObject);
    std::vector<AbstractGameObject *> getChildren();

private:
    std::vector<AbstractGameObject *> gameObjects;
};

#endif

Contents of RenderEngine.cpp:
#include "RenderEngine.h"

RenderEngine::RenderEngine()
{
}

void RenderEngine::update()
{
}

void RenderEngine::render(TFT_eSprite &sprite)
{
    sprite.pushSprite(0, 0);
}


Contents of RenderEngine.h:
#ifndef Render_Engine_H
#define Render_Engine_H

#include <vector>
#include <algorithm>
#include <TFT_eSPI.h>
#include "AbstractGameObject.h"
#include "../components/Display.h"

class RenderEngine : public AbstractGameObject
{
public:
    RenderEngine();
    void update() override;
    void render(TFT_eSprite &sprite) override;

private:
};

#endif

